@import url('./BaseStyles.module.css'); /* Import the BaseStyles CSS Module */

.buttonStyleSmall {
  composes: buttonStyle from './BaseStyles.module.css';

  padding: 5px 10px;
  font-size: 0.9em;
}

/* src/components/TimerDisplay.module.css */

/* ... (existing styles: .listItem, .listItemRunning, .listItemOverrun, .listItemCurrent, .buttonStyle, .buttonStyleSmall) ... */
.activeIcon {
  margin: 4px;
  display: flex; /* Enable flexbox for the div */
  justify-content: center; /* Center content horizontally */
  align-items: center; /* Center content vertically */
}
.nextIconPaused {
  stroke: lightgrey;
  fill: lightgrey;
}
.nextIconRunning {
  stroke: black;
  fill: black;
}
.nextIconRunning:hover {
  stroke: white;
  fill: white;
}

.playIcon:hover {
  stroke: green;
  fill: green;
}

.pauseIcon:hover {
  stroke: white;
  fill: white;
}

.removeIcon:hover {
  stroke: red;
  stroke-width: 4;
  fill: red;
}

.timerContainer {
  display: flex;
}

.baseTimer {
  display: grid;
  grid-template-columns: 24 auto;

  border: 1px solid #eee;
  border-radius: 5px;
  padding: 4px;
  margin-bottom: 10px;
  background-color: #f9f9f9;
  align-items: center; /* Vertically align items in the row */
}

.nameColumn,
.expectedTimeColumn,
.elapsedTimeColumn,
.buttonsColumn {
  margin: 2px;
  padding: 12px;
  /* border: 1px solid red; */
  /* You can adjust flex-grow and flex-basis to control column widths */
}
.expectedTimeColumn,
.elapsedTimeColumn {
  composes: timeBox from './BaseStyles.module.css';
  margin: 2px;
  padding: 12px;
}

.buttonsColumn {
  border: 1px solid #eee;
  padding: 0px;
  display: grid;
  grid-template-columns: repeat(1, 1fr);
  grid-template-rows: auto auto;
}

.nameColumn {
  flex: 40%;
}
.timeTitle {
  composes: timeTitle from './BaseStyles.module.css';
}
.timeDisplay {
  composes: timeDisplay from './BaseStyles.module.css';
}

.currentTimer {
  border: 3px solid black;
}

.waiting {
  background-color: #f9f9f9;
  --st: #f9f9f9;
}

.run {
  background-color: #ddffdd;
  --st: #ddffdd;
}

.overrun {
  background-color: #ffdddd;
  --st: #ffdddd;
}

@keyframes example {
  from {
    background-image:
    /* On "top" */ repeating-linear-gradient(
      45deg,
      transparent,
      transparent 10px,
      #eee 10px,
      #eee 20px
    );
  }
  to {
    background-image:
    /* On "top" */ repeating-linear-gradient(
      45deg,
      #eee,
      #eee 10px,
      transparent 10px,
      transparent 20px
    );
  }
}

/* https://codepen.io/t_afif/pen/xxaOXQr */
.running {
  --s: 30px; /* control the size */
  --g: 10px; /* control the gap */
  --c: #eee;

  --_l: #0000 calc(33% - 0.866 * var(--g)),
    var(--c) calc(33.2% - 0.866 * var(--g)) 33%, #0000 34%;
  background: repeating-linear-gradient(var(--c) 0 var(--g), #0000 0 50%) 0
      calc(0.866 * var(--s) - var(--g) / 2),
    conic-gradient(from -150deg at var(--g) 50%, var(--c) 120deg, #0000 0),
    linear-gradient(-120deg, var(--_l)),
    linear-gradient(-60deg, var(--_l)) var(--st); /* second color */
  background-size: var(--s) calc(3.466 * var(--s));
  animation: p infinite 1s linear;
  animation-direction: reverse;
}
@keyframes p {
  to {
    background-position-x: calc(-1 * var(--s));
  }
}
